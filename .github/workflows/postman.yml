name: Postman

on:
  schedule:
      - cron: '0 0 1 * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        default: "latest"
        description: "Postman Version, accepted values: ['latest', 'version/8.x.x']"
        required: true
  

env:
  FORCE_COLOR : 'true' # Force colors in console output
  VERSION: "latest" # to use custom postman version change this line into:
                    # VERSION: "version/x.x.x"
                    # example: VERSION: "version/8.9.1"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix: 
        include:
          - os_name: 'Linux x86_64'
            os_type:  'linux64'
            extract_cmd: 'tar -xf'
            extension: '.tar.gz'
            
          - os_name: 'Mac OS'
            os_type:  'osx'
            extract_cmd: 'unzip -q'
            extension: '.zip'
    
    name: "Fix Postman Scratchpad - ${{ matrix.os_name }}"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      - name : "Install aria2 downloader" 
        run: sudo apt update && sudo apt install aria2

      - name : "Configure VERSION Environment Variable" 
        run: |
          input_version="${{ github.event.inputs.version }}"
          if [[ ! -z $input_version ]]; then
            echo "Determined version from user input: $input_version"
            echo "VERSION=${input_version}" >> $GITHUB_ENV
          fi

      - name : "Download & Extract Postman " 
        run: |
          aria2c -q "https://dl.pstmn.io/download/${{ env.VERSION }}/${{ matrix.os_type }}"
          ${{ matrix.extract_cmd }} Postman*
          
      - name : "Get Postman Version" 
        run: |
          ext=${{ matrix.extension }}
          file=$(ls Postman*${ext})
          version=$(python3 -c "import re; print(re.match(r'Postman.*(([0-9]+\.){2}[0-9]+).*${ext}', '${file}').group(1))")
          echo "Postman Version = ${version}"
          echo "VERSION=${version}" >> $GITHUB_ENV
          rm -v ${file}
        
      - name : "Find requester.js/app.asar file" 
        run: |
          path=$(grep -R --text 'getWorkingInScratchpadBanner' $PWD/Postman* | cut -d':' -f1 | uniq | egrep 'requester|app.asar')
          
          if [[ "${path}" == *requester.js ]]; then
            echo "requester.js path: ${path}"
            echo "REQUESTER_JS=${path}" >> $GITHUB_ENV
          else
            echo "app.asar path: ${path}"
            echo "APP_ASAR=${path}" >> $GITHUB_ENV
          fi
          
          
      - name : "Fix Scratch Pad Banner [requester.js]" 
        if: ${{ env.REQUESTER_JS }}
        run: |
          npm install
          node fix.js -r ${{ env.REQUESTER_JS }}
      
      - name : "Fix Scratch Pad Banner [app.asar]" 
        if: ${{ env.APP_ASAR }}
        run: |
          npm install
          node fix.js -a ${{ env.APP_ASAR }}
      
      - name : "Postman Cleanup [requester.js]" 
        if: ${{ env.REQUESTER_JS }}
        continue-on-error: true
        run: |
          curl -sf 'https://gobinaries.com/tj/node-prune' | sudo sh
          find . -type d -name node_modules -exec node-prune {} \;
      
      - name : "Create Postman archive" 
        run: |
          tar --xz -cf Postman-${{ matrix.os_type }}-${{ env.VERSION }}.tar.xz ./Postman*
          ls -lh
          
      - name : "Calculate Checksum" 
        run: |
          echo -e "\nChecksum - ${{ matrix.os_name }}\n" >> checksum
          echo -n "SHA1: " >> checksum
          sha1sum Postman*.tar.xz >> checksum
          echo -n "SHA256: " >> checksum
          sha256sum Postman*.tar.xz >> checksum

      - name: Release Files
        uses: softprops/action-gh-release@v1
        with:
          name: "Postman v${{ env.VERSION }}"
          body_path: checksum
          tag_name: ${{ env.VERSION }}
          files: Postman*.tar.xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

